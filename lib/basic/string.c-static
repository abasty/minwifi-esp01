#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

#include "bmemory.h"

static void string_set(string_t *string, char *chars)
{
    string->chars = chars;
}

static void string_normalize(string_t *string)
{
    if (string->chars && *string->chars)
        return;

    string->chars = 0;
}

static void string_move(string_t *from, string_t *to)
{
    *to = *from;
    from->chars = 0;
    string_normalize(to);
}

static void string_slice(string_t *string, uint16_t start, uint16_t end)
{
    string_normalize(string);

    if (!string->chars)
        return;

    uint16_t len = strlen(string->chars);

    if (end == 0)
    {
        end = len;
    }

    if (start > end || start > len)
    {
        string_set(string, 0);
        return;
    }

    if (end > len || end == 0)
    {
        end = len;
    }

    uint16_t slice_len = end - start + 1;
    char *slice = bmem_string_alloc(slice_len + 1);

    if (!slice)
    {
        string_set(string, 0);
        return;
    }

    char *src = string->chars + start - 1;
    char *dst = slice;

    while (slice_len > 0)
    {
        *dst++ = *src++;
        slice_len--;
    }
    *dst = 0;

    string_set(string, slice);
}

static void string_concat(string_t *string1, string_t *string2)
{
    string_normalize(string2);

    if (!string2->chars)
        return;

    if (!string1->chars)
    {
        string_set(string1, string2->chars);
        return;
    }

    char *concat = bmem_string_alloc(strlen(string1->chars) + strlen(string2->chars) + 1);
    char *dst = concat;
    char *src = string1->chars;
    while (*src) *dst++ = *src++;
    src = string2->chars;
    while (*src) *dst++ = *src++;
    *dst = 0;
    string_set(string1, concat);
}
