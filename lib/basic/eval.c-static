/*
 * Copyright Â© 2023 Alain Basty
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <math.h>

#ifdef MINITEL
#include "tty-minitel.h"
#else
#include "tty-vt100.h"
#endif

#include "berror.h"
#include "bmemory.h"
#include "token.h"
#include "keywords.h"
#include "eval.h"
#include "bio.h"

static inline void eval_input_mode(bool mode);
static bool eval_string_tty();
static bool eval_array_ref(uint8_t token, uint8_t *dim_count, uint32_t *dims);


extern bastos_io_t *bio;
extern bmem_t *bmem;

uint8_t functions[] = {
    TOKEN_KEYWORD_ABS,
    TOKEN_KEYWORD_ACS,
    TOKEN_KEYWORD_ASN,
    TOKEN_KEYWORD_ATN,
    TOKEN_KEYWORD_BIN,
    TOKEN_KEYWORD_COS,
    TOKEN_KEYWORD_EXP,
    TOKEN_KEYWORD_INT,
    TOKEN_KEYWORD_LN,
    TOKEN_KEYWORD_SGN,
    TOKEN_KEYWORD_SIN,
    TOKEN_KEYWORD_SQR,
    TOKEN_KEYWORD_TAN,
    TOKEN_KEYWORD_NOT,
    0,
};

uint8_t variables[] = {
    TOKEN_VARIABLE_NUMBER,
    TOKEN_VARIABLE_STRING,
    0,
};

char tty_codes[] = {
    TOKEN_KEYWORD_AT,
    TOKEN_KEYWORD_INK,
    TOKEN_KEYWORD_PAPER,
    TOKEN_KEYWORD_CURSOR,
    TOKEN_KEYWORD_CLS,
    0,
};

const char compare_tokens[] = {
    TOKEN_COMPARE_EQ,
    TOKEN_COMPARE_GT,
    TOKEN_COMPARE_LT,
    TOKEN_COMPARE_NE,
    TOKEN_COMPARE_GE,
    TOKEN_COMPARE_LE,
    0,
};

uint8_t instr0[] = {
    TOKEN_KEYWORD_CLEAR,
    TOKEN_KEYWORD_NEW,
    TOKEN_KEYWORD_CAT,
    TOKEN_KEYWORD_RESET,
    TOKEN_KEYWORD_STOP,
    TOKEN_KEYWORD_CONT,
    TOKEN_KEYWORD_RUN,
    TOKEN_KEYWORD_RETURN,
    TOKEN_KEYWORD_FAST,
    TOKEN_KEYWORD_SLOW,
    TOKEN_KEYWORD_FREE,
    TOKEN_KEYWORD_BASTOS,
    0,
};

uint8_t instr1s[] = {
    TOKEN_KEYWORD_ERASE,
    TOKEN_KEYWORD_SAVE,
    TOKEN_KEYWORD_LOAD,
    0,
};

uint8_t instr1n[] = {
    TOKEN_KEYWORD_GOSUB,
    TOKEN_KEYWORD_GOTO,
    0,
};

static void running_state_clear()
{
    bmem->bstate.pc = 0;
    bmem->bstate.sp = 0;
    memset(bmem->loops, 0, sizeof(bmem->loops));
}

static bool eval_token(uint8_t c)
{
    if (*bmem->bstate.read_ptr != c)
    {
        return false;
    }
    bmem->bstate.token = *bmem->bstate.read_ptr++;
    return true;
}

static uint8_t eval_token_one_of(const char *set)
{
    char c = *bmem->bstate.read_ptr;

    while (*set && c != *set)
    {
        set++;
    }
    if (!*set)
    {
        return 0;
    }
    bmem->bstate.token = c;
    bmem->bstate.read_ptr++;
    return c;
}

uint8_t len_code_functions[] = {
    TOKEN_KEYWORD_CODE,
    TOKEN_KEYWORD_LEN,
    0,
};

static bool eval_len_code()
{
    uint8_t token;

    if ((token = eval_token_one_of((char*) len_code_functions)) == 0 || !eval_string_expr())
        return false;

    if (!bmem->bstate.do_eval)
        return true;

    if (!bmem->bstate.string)
    {
        bmem->bstate.number = 0;
        return true;
    }

    if (token == TOKEN_KEYWORD_LEN)
    {
        bmem->bstate.number = strlen(bmem->bstate.string);
        return true;
    }

    bmem->bstate.number = *bmem->bstate.string;
    return true;
}

static bool eval_number()
{
    bool minus = eval_token('-');
    float value = 0;

    if (eval_token(TOKEN_KEYWORD_PI))
    {
        value = 3.1415926536;
    }
    else if (eval_token(TOKEN_KEYWORD_RND))
    {
        value = (float)((double)rand() / (double)RAND_MAX);
    }
    else if (eval_token(TOKEN_NUMBER))
    {
        uint8_t *write_value_ptr = (uint8_t *)&value;
        *write_value_ptr++ = *bmem->bstate.read_ptr++;
        *write_value_ptr++ = *bmem->bstate.read_ptr++;
        *write_value_ptr++ = *bmem->bstate.read_ptr++;
        *write_value_ptr++ = *bmem->bstate.read_ptr++;
    }
    else if (eval_token(TOKEN_VARIABLE_NUMBER))
    {
        char *name = (char *)bmem->bstate.read_ptr - 1;
        bmem->bstate.read_ptr += strlen(name);

        uint8_t dim = 0;
        uint32_t dims[B_DIM_MAX];

        eval_array_ref(TOKEN_VARIABLE_NUMBER, &dim, dims);

        if (bmem->bstate.do_eval)
        {
            if (dim == 0)
            {
                var_t *var = bastos_var_get(name);
                if (var)
                {
                    value = var->numbers[0];
                }
                else
                {
                    value = 0;
                }
            }
            else
            {
                float *number = bmem_number_array_get_cell(name, dim, dims);
                if (!number)
                {
                    bmem->bstate.error = BERROR_RANGE;
                    return false;
                }
                value = *number;
            }
        }
    }
    else
    {
        return false;
    }

    bmem->bstate.number = value;
    bmem->bstate.token = TOKEN_NUMBER;
    if (minus)
    {
        bmem->bstate.number = -bmem->bstate.number;
    }
    return true;
}

static bool eval_function()
{
    if (!eval_token_one_of((char *)functions))
    {
        return false;
    }
    uint8_t f = bmem->bstate.token;
    if (!eval_factor())
    {
        return false;
    }
    switch (f)
    {
    case TOKEN_KEYWORD_ABS:
        bmem->bstate.number = fabsf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_ACS:
        bmem->bstate.number = acosf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_ASN:
        bmem->bstate.number = asinf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_ATN:
        bmem->bstate.number = atanf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_BIN:
        // FIXME
        break;
    case TOKEN_KEYWORD_COS:
        bmem->bstate.number = cosf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_EXP:
        bmem->bstate.number = expf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_INT:
        bmem->bstate.number = truncf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_NOT:
        bmem->bstate.number = truncf(bmem->bstate.number) == 0 ? 1 : 0;
        break;
    case TOKEN_KEYWORD_LN:
        bmem->bstate.number = logf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_SGN:
        bmem->bstate.number = (bmem->bstate.number > 0) - (bmem->bstate.number < 0);
        break;
    case TOKEN_KEYWORD_SIN:
        bmem->bstate.number = sinf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_SQR:
        bmem->bstate.number = sqrtf(bmem->bstate.number);
        break;
    case TOKEN_KEYWORD_TAN:
        bmem->bstate.number = tanf(bmem->bstate.number);
        break;
    default:
        return false;
    }
    return true;
}

static bool eval_factor()
{
    bool result =
        eval_number() ||
        eval_function() ||
        eval_len_code() ||
        (eval_token('(') && eval_expr(TOKEN_NUMBER) && eval_token(')'));
    return result;
}

static bool eval_term()
{
    bool result = true;
    float acc = 0;
    if ((result = eval_factor()))
    {
        acc = bmem->bstate.number;
        // TODO: Manage / and % by zero (inf)
        while (eval_token_one_of("*/%"))
        {
            uint8_t op = bmem->bstate.token;
            result = eval_factor();
            if (!result)
            {
                break;
            }
            switch (op)
            {
            case '*':
                acc *= bmem->bstate.number;
                break;
            case '/':
                acc /= bmem->bstate.number;
                break;
            case '%':
                if ((int)(truncf(bmem->bstate.number)) != 0)
                {
                   acc = (int)(truncf(acc)) % (int)(truncf(bmem->bstate.number));
                }
                else
                {
                    acc = INFINITY;
                }
                break;
            }
            bmem->bstate.number = acc;
        }
    }
    bmem->bstate.token = TOKEN_NUMBER;
    return result;
}

static bool eval_float_expr()
{
    bool result = true;
    float acc = 0;
    if ((result = eval_term()))
    {
        acc = bmem->bstate.number;
        while (eval_token_one_of("+-|&"))
        {
            uint8_t op = bmem->bstate.token;
            result = eval_term();
            if (!result)
            {
                break;
            }
            switch (op)
            {
            case '+':
                acc += bmem->bstate.number;
                break;
            case '-':
                acc -= bmem->bstate.number;
                break;
            case '&':
                acc = (int)(truncf(acc)) & (int)(truncf(bmem->bstate.number));
                break;
            case '|':
                acc = (int)(truncf(acc)) | (int)(truncf(bmem->bstate.number));
                break;
            }
            bmem->bstate.number = acc;
        }
        bmem->bstate.token = TOKEN_NUMBER;
    }
    return result;
}

static bool eval_compare_expr()
{
    if (!eval_float_expr() && !eval_string_expr())
        return false;

    uint8_t type_token = bmem->bstate.token;

    if (eval_token_one_of(compare_tokens))
    {
        uint8_t op = bmem->bstate.token;
        int result = 0;

        if (type_token == TOKEN_NUMBER)
        {
            float arg1 = bmem->bstate.number;

            if (!eval_float_expr())
                return false;

            result = arg1 - bmem->bstate.number;
        }
        else // type_token == TOKEN_STRING
        {
            char *string1 = bmem->bstate.string;

            if (!eval_string_expr())
                return false;

            result = strcmp(string1 ? string1 : "", bmem->bstate.string ? bmem->bstate.string : "");
        }
        switch (op)
        {
        case '=':
            bmem->bstate.number = result == 0;
            break;
        case '<':
            bmem->bstate.number = result < 0;
            break;
        case '>':
            bmem->bstate.number = result > 0;
            break;
        case TOKEN_COMPARE_NE:
            bmem->bstate.number = result != 0;
            break;
        case TOKEN_COMPARE_LE:
            bmem->bstate.number = result <= 0;
            break;
        case TOKEN_COMPARE_GE:
            bmem->bstate.number = result >= 0;
            break;
        }
        bmem->bstate.token = TOKEN_NUMBER;
    }

    return true;
}

static bool eval_expr(uint8_t type_token)
{
    if (!eval_compare_expr())
        return false;

    if (bmem->bstate.token == TOKEN_STRING)
        return (type_token & TOKEN_STRING) != 0;

    float acc = bmem->bstate.number == 0 ? 0 : 1;
    bool is_bool_expr = false;

    while (eval_token(TOKEN_KEYWORD_AND) || eval_token(TOKEN_KEYWORD_OR))
    {
        uint8_t op = bmem->bstate.token;

        if (!eval_compare_expr())
            return false;

        float arg = bmem->bstate.number == 0 ? 0 : 1;

        if (op == TOKEN_KEYWORD_AND)
        {
            acc = acc && arg;
        }
        else
        {
            acc = acc || arg;
        }
        is_bool_expr = true;
    }
    if (is_bool_expr)
    {
        bmem->bstate.number = acc;
    }

    return (type_token & TOKEN_NUMBER) != 0;
}

static bool eval_string_chr()
{
    if (!eval_token(TOKEN_KEYWORD_CHR))
        return false;

    if (!eval_term())
        return false;

    if (bmem->bstate.do_eval)
    {
        bmem->bstate.string = bmem_string_alloc(2);
        if (!bmem->bstate.string)
            return false;

        bmem->bstate.string[0] = (char)((uint8_t)(truncf(bmem->bstate.number)));
        bmem->bstate.string[1] = 0;
    }

    return true;
}

static bool eval_string_str()
{
    if (!eval_token(TOKEN_KEYWORD_STR))
        return false;

    if (!eval_term())
        return false;

    if (bmem->bstate.do_eval)
    {
        bmem->bstate.string = bmem_string_alloc(16);
        if (!bmem->bstate.string)
            return false;

        sprintf(bmem->bstate.string, "%g", bmem->bstate.number);
    }

    return true;
}

static bool eval_string_inkey()
{
    if (!eval_token(TOKEN_KEYWORD_INKEY))
        return false;

    if (bmem->bstate.do_eval)
    {
        bmem->bstate.string = bmem_string_alloc(2);
        if (!bmem->bstate.string)
            return false;

        bmem->bstate.string[0] = bmem->bstate.inkey;
        bmem->bstate.string[1] = 0;
        bmem->bstate.inkey = 0;
    }

    return true;
}

static bool eval_string_const()
{
    if (!eval_token(TOKEN_STRING))
        return false;

    bmem->bstate.string = (char *) bmem->bstate.read_ptr;
    while(*bmem->bstate.read_ptr++);
    return true;
}

static bool eval_string_var()
{
    if (!eval_token(TOKEN_VARIABLE_STRING))
        return false;

    char *name = (char *)bmem->bstate.read_ptr - 1;
    while(*bmem->bstate.read_ptr++);

    uint8_t dim = 0;
    uint32_t dims[B_DIM_MAX];

    eval_array_ref(TOKEN_VARIABLE_STRING, &dim, dims);

    if (bmem->bstate.do_eval)
    {
        bmem->bstate.string = bmem_string_array_get_cell(name, &dim, dims);
        if (!bmem->bstate.string || dim < 2)
        {
            bmem->bstate.error = dim == 0 ? 0 : BERROR_RANGE;
            return true;
        }

        string_slice(&bmem->bstate.string, dims[dim - 2], dims[dim - 1]);
    }
    return true;
}

static bool eval_string_term()
{
    bool result =
        eval_string_const() ||
        eval_string_var() ||
        eval_string_chr() ||
        eval_string_tty() ||
        eval_string_str() ||
        eval_string_inkey() ||
        (eval_token('(') && eval_string_expr() && eval_token(')'));

    if (!result)
        return false;

    // Optional range
    if (!eval_token('('))
        return true;

    uint16_t start = 1;
    uint16_t end = 0;

    if (eval_expr(TOKEN_NUMBER))
    {
        start = bmem->bstate.number;
        if (start < 1)
        {
            start = 1;
        }
        end = start;
    }

    if (eval_token(TOKEN_KEYWORD_TO))
    {
        if (eval_expr(TOKEN_NUMBER))
        {
            end = bmem->bstate.number;
        }
        else
        {
            end = 0;
        }
    }

    if (!eval_token(')'))
        return false;

    if (bmem->bstate.do_eval)
    {
        string_slice(&bmem->bstate.string, start, end);
    }

    return result;
}

static bool eval_string_expr()
{
    bool result = true;
    if ((result = eval_string_term()))
    {
        char *string1 = bmem->bstate.string;

        while(eval_token('+'))
        {
            result = eval_string_term();
            if (!result)
                break;

            if (bmem->bstate.do_eval)
            {
                string_concat(&string1, bmem->bstate.string);
            }
        }
        if (bmem->bstate.do_eval)
        {
            bmem->bstate.string = string1;
        }
        bmem->bstate.token = TOKEN_STRING;
    }
    return result;
}

static bool eval_variable_ref()
{
    bmem->bstate.var_ref = (char *)bmem->bstate.read_ptr;

    if (!eval_token_one_of((char *)variables))
        return false;

    // Pass variable chars until zero
    while (*bmem->bstate.read_ptr++)
        ;

    return true;
}

static bool eval_array_ref(uint8_t token, uint8_t *dim_count, uint32_t *dims)
{
    if (!eval_token('('))
        return false;

    *dim_count = 0;

    while (eval_float_expr() || eval_token(TOKEN_KEYWORD_TO))
    {

        if (bmem->bstate.token == TOKEN_KEYWORD_TO)
        {
            dims[*dim_count] = 1;
            (*dim_count)++;
            (*dim_count) |= B_DIM_RANGE_FLAG;
            break;
        }

        if (bmem->bstate.do_eval)
        {
            if ((*dim_count & ~B_DIM_RANGE_FLAG) >= B_DIM_MAX - 1)
            {
                bmem->bstate.error = BERROR_RANGE;
                return false;
            }

            if (bmem->bstate.number < 1 || bmem->bstate.number >= BASTOS_MEMORY_SIZE)
            {
                bmem->bstate.error = BERROR_RANGE;
                return false;
            }
        }
        dims[*dim_count] = bmem->bstate.number;
        (*dim_count)++;

        if (eval_token(','))
            continue;

        if (eval_token(TOKEN_KEYWORD_TO))
        {
            (*dim_count) |= B_DIM_RANGE_FLAG;
            break;
        }
        break;
    }

    if ((*dim_count & B_DIM_RANGE_FLAG) != 0)
    {
        if (eval_float_expr())
        {
            if (bmem->bstate.number < 1 || bmem->bstate.number >= BASTOS_MEMORY_SIZE)
            {
                bmem->bstate.error = BERROR_RANGE;
                return false;
            }
            dims[*dim_count & ~B_DIM_RANGE_FLAG] = bmem->bstate.number;
        }
        else
        {
            dims[*dim_count & ~B_DIM_RANGE_FLAG] = BASTOS_MEMORY_SIZE;
        }
        (*dim_count)++;
    }

    return eval_token(')');
}

static bool eval_dim()
{
    if (!eval_token(TOKEN_KEYWORD_DIM))
        return false;

    if (!eval_variable_ref())
        return false;

    char *name = bmem->bstate.var_ref;
    uint8_t token = name[0];

    uint8_t dim = 0;
    uint32_t dims[B_DIM_MAX];

    if (!eval_array_ref(token, &dim, dims))
        return false;

    if (dim == 0)
        return false;

    if ((dim & B_DIM_RANGE_FLAG) != 0)
        return false;

    if (!bmem->bstate.do_eval)
        return true;

    // Copy name in tmp
    char tmp[B_NAME_SIZE_MAX];
    token |= TOKEN_ARRAY_FLAG;
    strncpy(tmp, name, B_NAME_SIZE_MAX - 1);
    tmp[B_NAME_SIZE_MAX - 1] = 0;
    tmp[0] = token;

    // Remove existing variable
    var_t *var = bastos_var_get(tmp);
    if (var)
        bmem_var_unset(var);

    // Create variable
    var = bmem_var_new(tmp, token, dim, dims);
    if (!var)
        bmem->bstate.error = BERROR_MEMORY;

    return true;
}

static bool eval_let()
{
    if (!eval_token(TOKEN_KEYWORD_LET))
        return false;

    if (!eval_variable_ref())
        return false;

    char *name = bmem->bstate.var_ref;
    uint8_t token = *((uint8_t *)name);

    uint8_t dim = 0;
    uint32_t dims[B_DIM_MAX];

    eval_array_ref(token, &dim, dims);

    if (!eval_token('='))
        return false;

    if (token == TOKEN_VARIABLE_NUMBER)
    {
        if (!eval_expr(TOKEN_NUMBER))
            return false;

        if (bmem->bstate.do_eval)
        {
            // Manage simple variable
            if (dim == 0)
                return bmem_var_number_set(name, bmem->bstate.number) != 0;

            // Manage array
            float *number = bmem_number_array_get_cell(name, dim, dims);
            if (!number)
            {
                bmem->bstate.error = BERROR_RANGE;
                return true;
            }
            *number = bmem->bstate.number;
        }
        return true;
    }
    else if (token == TOKEN_VARIABLE_STRING)
    {
        if (!eval_expr(TOKEN_STRING))
            return false;

        if (bmem->bstate.do_eval)
        {
            if (dim == 0)
                return bmem_var_string_set(name, bmem->bstate.string) != 0;

            // Manage array and slice
            char *string = bmem_string_array_get_cell(name, &dim, dims);
            if (!string)
            {
                bmem->bstate.error = BERROR_RANGE;
                return true;
            }

            uint16_t len = strlen(string);
            uint16_t start = dims[dim - 2];
            uint16_t end = dims[dim - 1];

            if (len == 0)
                return true;
            if (start <= 0)
                return true;
            if (start > len)
                return true;
            if (end < start)
                return true;
            if (end > len)
                end = len;

            uint8_t *src = (uint8_t*) bmem->bstate.string;
            uint8_t *dst = (uint8_t*) string + start - 1;
            uint16_t n = end - start + 1;
            while (n)
            {
                if (src && *src)
                {
                    *dst++ = *src++;
                }
                else
                {
                    *dst++ = ' ';
                }
                n--;
            }
        }
        return true;
    }

    return false;
}

int8_t eval_input_store(char *io_string)
{
    if (strlen(io_string) == 0)
        return BERROR_NONE;

    eval_input_mode(false);

    if (bmem->bstate.input_var_token == TOKEN_VARIABLE_NUMBER)
    {
        char *end_ptr = 0;
        float value = strtof(io_string, &end_ptr);
        if (end_ptr - io_string != strlen(io_string))
            return BERROR_SYNTAX;

        if (bmem_var_number_set(name_of_var(bmem->bstate.input_var), value) == 0)
            return BERROR_MEMORY;

        return BERROR_NONE;
    }
    else if (bmem->bstate.input_var_token == TOKEN_VARIABLE_STRING)
    {
        if (bmem_var_string_set(name_of_var(bmem->bstate.input_var), io_string) == 0)
            return BERROR_MEMORY;

        return BERROR_NONE;
    }
    return BERROR_SYNTAX;
}

static bool eval_input()
{
    if (!eval_token(TOKEN_KEYWORD_INPUT))
        return false;

    if (eval_string_const())
    {
        if (bmem->bstate.do_eval)
        {
            bio->print_string(bmem->bstate.string);
        }

        if (!eval_token(','))
            return false;
    }

    if (!eval_variable_ref())
        return false;

    if (bmem->bstate.do_eval)
    {
        bmem->bstate.input_var = 0;
        bmem->bstate.input_var_token = bmem->bstate.token;

        // Create input variable
        if (bmem->bstate.input_var_token == TOKEN_VARIABLE_NUMBER)
        {
            // Create variable with default value of 0
            bmem->bstate.input_var = bmem_var_number_set(bmem->bstate.var_ref, 0);
        }
        else if (bmem->bstate.input_var_token == TOKEN_VARIABLE_STRING)
        {
            bmem->bstate.input_var = bmem_var_string_set(bmem->bstate.var_ref, "");
        }
        if (bmem->bstate.input_var == 0)
            return false;

        // Go to input mode
        eval_input_mode(true);
    }
    return true;
}

static bool eval_print(bool implicit)
{
    if (!implicit && !eval_token(TOKEN_KEYWORD_PRINT))
        return false;

    if (implicit)
    {
        // rewind to tty / string token
        bmem->bstate.read_ptr--;
    }

    bool result = true;
    bool ln = true;

    while (result && *bmem->bstate.read_ptr != 0)
    {
        ln = true;
        if (eval_expr(TOKEN_NUMBER | TOKEN_STRING))
        {
            if (bmem->bstate.do_eval)
            {
                if (bmem->bstate.token == TOKEN_NUMBER)
                {
                    bio->print_float(bmem->bstate.number);
                }
                else // TOKEN_STRING
                {
                    bio->print_string(bmem->bstate.string ? bmem->bstate.string : "");
                }
            }
        }
        else if (eval_string_tty())
        {
            if (bmem->bstate.do_eval)
            {
                bio->print_string(bmem->bstate.string ? bmem->bstate.string : "");
            }
        }
        else if (eval_token(','))
        {
            if (bmem->bstate.do_eval)
            {
                bio->print_string(" ");
            }

        }
        else if (eval_token(';'))
        {
            ln = false;
        }
        else
        {
            result = *bmem->bstate.read_ptr == 0;
        }
    }

    if (result && bmem->bstate.do_eval)
    {
        if (ln && !implicit)
        {
            bio->print_string("\r\n");
        }
    }

    return result;
}

static bool eval_list()
{
    if (!eval_token(TOKEN_KEYWORD_LIST))
        return false;

    uint16_t start = 0;
    uint16_t n = 20;

    if (eval_number())
    {
        start = bmem->bstate.number;
        if (eval_token(','))
        {
            if (!eval_number())
                return false;

            n = bmem->bstate.number;
        }
    }

    if (bmem->bstate.do_eval)
    {
        prog_t *prog = bmem_prog_first_line();
        while (prog && n >= 1)
        {
            if (prog->line_no >= start)
            {
                bio->print_integer("%4d", (int) prog->line_no);
                char c[2];
                c[0] = bmem->bstate.pc == prog ? '>' : ' ';
                c[1] = 0;
                bio->print_string(c);
                bio->print_string(untokenize(prog->line));
                bio->print_string("\r\n");
                n--;
            }
            prog = bmem_prog_next_line(prog);
        }
    }

    return true;
}

static inline void eval_input_mode(bool mode)
{
    bmem->bstate.inputting = mode;
}

int8_t eval_prog_next()
{
    int8_t err = BERROR_NONE;
    prog_t *pc = bmem->bstate.pc;

    if (pc)
    {
        err = eval_prog(pc, true);
        if (err == BERROR_NONE)
        {
            if (bmem->bstate.pc == pc && (bmem->bstate.flags & B_GOTO_FLAG) == 0)
            {
                // If executed line did not change PC then move PC to next line
                bmem->bstate.pc = bmem_prog_next_line(bmem->bstate.pc);
            }
            return BERROR_NONE;
        }
    }

    if (err != BERROR_NONE && bmem->bstate.pc != 0)
    {
        bio->print_integer("On line %d: ", bmem->bstate.pc->line_no);
    }

    bmem->bstate.pc = 0;
    bmem->bstate.running = false;

    return err;
}

static inline bool eval_running()
{
    return bmem->bstate.running;
}

static void eval_stop()
{
    bmem->bstate.running = false;
    eval_input_mode(false);
}

static void eval_cont()
{
    bmem->bstate.running = bmem->bstate.pc != 0;
}

static void eval_reset()
{
    bmem->bstate.reset = true;
}

static void eval_free()
{
    bio->print_string("       sys  prog  vars  free\r\n");
    bio->print_string("l/v:       ");
    bio->print_integer("%5d ", bmem_line_count());
    bio->print_integer("%5d ", bmem_var_count());
    bio->print_string("\r\n");
    bio->print_integer("Mem: %5d ", bmem->prog_start - (uint8_t *)bmem);
    bio->print_integer("%5d ", bmem->prog_end - bmem->prog_start);
    bio->print_integer("%5d ", bmem->vars_end - bmem->vars_start);
    bio->print_integer("%5d\r\n", bmem->vars_start - bmem->strings_end);
}

static void eval_bastos()
{
    bio->print_string(COFF P_ACK_OFF_PRISE P_LOCAL_ECHO_OFF P_ROULEAU);
    bio->print_string("\x1f\x40\x41" CLEOL CLS);
    bio->print_string(" BASTOS 16K Microcontroller (v1)\r\n");
    bio->print_string(" Basic for Terminal Operating System\r\n\r\n");
    bio->print_string(" (c) 2024-2025 ABa\r\n\r\n");
    bio->print_integer(" %d bytes free\r\n", bmem->vars_start - bmem->strings_end);
    bio->print_string("\r\nReady\r\n" CON);
}

static bool eval_inputting()
{
    return bmem->bstate.inputting;
}

static void eval_run()
{
    running_state_clear();
    bmem_vars_clear();
    bmem->bstate.pc = bmem_prog_first_line();
    bmem->bstate.running = true;
}

static void eval_goto()
{
    bmem->bstate.pc = bmem_prog_get_line_or_next(bmem->bstate.number);
    bmem->bstate.running = bmem->bstate.pc != 0;
    bmem->bstate.flags |= B_GOTO_FLAG;

    if (bmem->bstate.pc)
        return;

    bmem->bstate.error = BERROR_RUN;
}

static void eval_gosub()
{
    if (bmem->bstate.sp >= EVAL_RETURNS_SIZE)
    {
        bmem->bstate.error = BERROR_RUN;
        return;
    }

    prog_t *next = bmem_prog_next_line(bmem->bstate.pc);
    bmem->bstate.pc = bmem_prog_get_line_or_next(bmem->bstate.number);
    bmem->bstate.running = bmem->bstate.pc != 0;

    if (!bmem->bstate.pc)
    {
        bmem->bstate.error = BERROR_RUN;
        return;
    }

    bmem->returns[bmem->bstate.sp++].line_no = next ? next->line_no : 0;
}

static void eval_return()
{
    if (bmem->bstate.sp < 1)
    {
        bmem->bstate.error = BERROR_RUN;
        return;
    }

    uint16_t line_no = bmem->returns[--bmem->bstate.sp].line_no;
    bmem->bstate.pc = bmem_prog_get_line_or_next(line_no);
    bmem->bstate.running = bmem->bstate.pc != 0;
}

static void eval_save()
{
    if (bmem->bstate.string == 0)
        return;

    bastos_save(bmem->bstate.string);
}

static void eval_load()
{
    if (bmem->bstate.string == 0)
        return;

    bmem->bstate.running = false;
    bmem->bstate.pc = 0;
    running_state_clear();
    bmem->bstate.error = bastos_load(bmem->bstate.string);
}

static void eval_erase()
{
    if (bio->erase(bmem->bstate.string) != 0)
    {
        bmem->bstate.error = BERROR_IO;
    }
}

static void eval_clear()
{
    running_state_clear();
    bmem_vars_clear();
}

static void eval_new()
{
    running_state_clear();
    bastos_prog_new();
}

static bool eval_string_tty()
{
    if (!eval_token_one_of(tty_codes))
        return false;

    uint8_t fn = bmem->bstate.token;
    char codes[CODE_SEQUENCE_MAX_SIZE];
    *codes = 0;

    // 0 arg
    if (fn == TOKEN_KEYWORD_CLS)
    {
        snprintf(codes, CODE_SEQUENCE_MAX_SIZE, CLS);
        goto EVAL;
    }

    if (!eval_float_expr())
        return false;

    // 1 arg
    uint8_t arg1 = bmem->bstate.number;
    if (fn == TOKEN_KEYWORD_INK)
    {
        snprintf(codes, CODE_SEQUENCE_MAX_SIZE, INK, arg1 + INK_DELTA);
        goto EVAL;
    }
    if (fn == TOKEN_KEYWORD_PAPER)
    {
        snprintf(codes, CODE_SEQUENCE_MAX_SIZE, PAPER, arg1 + PAPER_DELTA);
        goto EVAL;
    }
    if (fn == TOKEN_KEYWORD_CURSOR)
    {
        snprintf(codes, CODE_SEQUENCE_MAX_SIZE, "%s", arg1 ? CON : COFF);
        goto EVAL;
    }

    // 2 args
    if (!eval_token(','))
        return false;

    if (!eval_float_expr())
        return false;

    uint8_t arg2 = bmem->bstate.number;
    snprintf(codes, CODE_SEQUENCE_MAX_SIZE, CUR, arg1 + CUR_DELTA_V, arg2 + CUR_DELTA_H);

EVAL:
    if (!bmem->bstate.do_eval)
        return true;

    uint8_t len = strlen(codes);
    bmem->bstate.string = bmem_string_alloc(len + 1);
    if (!bmem->bstate.string)
        return false;

    // Copy codes to string
    for (uint8_t i = 0; i < len; i++)
    {
        bmem->bstate.string[i] = codes[i];
    }
    bmem->bstate.string[len] = 0;

    return true;
}

static bool eval_simple_instruction()
{
    uint8_t instr;

    // 0 arg instructions
    if ((instr =  eval_token_one_of((char *)instr0)))
        goto EVAL;

    // 1 string instructions
    if ((instr =  eval_token_one_of((char *)instr1s)) && eval_string_expr())
        goto EVAL;

    // 1 number instructions
    if ((instr =  eval_token_one_of((char *)instr1n)) && eval_expr(TOKEN_NUMBER))
        goto EVAL;

    if (eval_token_one_of(tty_codes))
        return eval_print(true);

    return false;

EVAL:
    if (!bmem->bstate.do_eval)
        return true;

    if (instr == TOKEN_KEYWORD_GOTO)
    {
        eval_goto();
        return true;
    }
    if (instr == TOKEN_KEYWORD_GOSUB)
    {
        eval_gosub();
        return true;
    }
    if (instr == TOKEN_KEYWORD_ERASE)
    {
        eval_erase();
        return true;
    }
    if (instr == TOKEN_KEYWORD_SAVE)
    {
        eval_save();
        return true;
    }
    if (instr == TOKEN_KEYWORD_LOAD)
    {
        eval_load();
        return true;
    }
    if (instr == TOKEN_KEYWORD_RETURN)
    {
        eval_return();
        return true;
    }
    if (instr == TOKEN_KEYWORD_CLEAR)
    {
        eval_clear();
        return true;
    }
    if (instr == TOKEN_KEYWORD_RUN)
    {
        eval_run();
        return true;
    }
    if (instr == TOKEN_KEYWORD_NEW)
    {
        eval_new();
        return true;
    }
    if (instr == TOKEN_KEYWORD_RESET)
    {
        eval_reset();
        return true;
    }
    if (instr == TOKEN_KEYWORD_CAT || instr == TOKEN_KEYWORD_FAST || instr == TOKEN_KEYWORD_SLOW)
    {
        bio->function0(instr);
        return true;
    }
    if (instr == TOKEN_KEYWORD_STOP)
    {
        eval_stop();
        return true;
    }
    if (instr == TOKEN_KEYWORD_CONT)
    {
        eval_cont();
        return true;
    }
    if (instr == TOKEN_KEYWORD_FREE)
    {
        eval_free();
        return true;
    }
    if (instr == TOKEN_KEYWORD_BASTOS)
    {
        eval_bastos();
        return true;
    }
    return false;
}

static bool eval_rem()
{
    if (!eval_token(TOKEN_KEYWORD_REM))
        return false;

    bmem->bstate.read_ptr = bmem->bstate.prog->line + bmem->bstate.prog->len;

    return true;
}

static bool eval_instruction()
{
    return
        eval_print(false) ||
        eval_input() ||
        eval_simple_instruction()
#ifndef OTA_ONLY
        ||
        eval_rem() ||
        eval_let() ||
        eval_dim() ||
        eval_list()
#endif
        ;
}

static bool eval_if()
{
    if (!eval_token(TOKEN_KEYWORD_IF))
        return false;

    if (!eval_expr(TOKEN_NUMBER))
        return false;

    if (bmem->bstate.do_eval)
    {
        if (bmem->bstate.number == 0)
        {
            // If test is negative, ignore end of line
            bmem->bstate.read_ptr = bmem->bstate.prog->line + bmem->bstate.prog->len;
            return true;
        }
    }

    if (!eval_token(TOKEN_KEYWORD_THEN))
        return false;

    if (!eval_instruction())
        return false;

    return true;
}

static bool eval_for()
{
    if (!eval_token(TOKEN_KEYWORD_FOR))
        return false;

    if (!eval_variable_ref() || bmem->bstate.var_ref[0] != TOKEN_VARIABLE_NUMBER || bmem->bstate.var_ref[2] != 0)
        return false;

    if (!eval_token('='))
        return false;

    if (!eval_expr(TOKEN_NUMBER))
        return false;

    float init = bmem->bstate.number;

    if (!eval_token(TOKEN_KEYWORD_TO))
        return false;

    if (!eval_expr(TOKEN_NUMBER))
        return false;

    float limit = bmem->bstate.number;
    float step = 1;

    if (eval_token(TOKEN_KEYWORD_STEP))
    {
        if (!eval_expr(TOKEN_NUMBER))
            return false;

        step = bmem->bstate.number;
    }

    if (!bmem->bstate.do_eval)
        return true;

    int loop_index = bmem->bstate.var_ref[1] - 'A';
    if (loop_index < 0 || loop_index > 25)
    {
        bmem->bstate.error = BERROR_RANGE;
        return true;
    }

    loop_t *loop = bmem->loops + loop_index;
    if (loop->for_line != 0)
        return true;

    if (bmem_var_number_set(bmem->bstate.var_ref, init) == 0)
    {
        bmem->bstate.error = BERROR_MEMORY;
        return true;
    }

    loop->for_line = bmem->bstate.prog;
    loop->limit = limit;
    loop->step = step;
    // TODO: Search for next and run next? Check in emulator

    return true;
}

static bool eval_next()
{
    if (!eval_token(TOKEN_KEYWORD_NEXT))
        return false;

    if (!eval_variable_ref() || *bmem->bstate.var_ref != TOKEN_VARIABLE_NUMBER)
        return false;

    if (!bmem->bstate.do_eval)
        return true;

    int loop_index = bmem->bstate.var_ref[1] - 'A';
    if (loop_index < 0 || loop_index > 25)
    {
        bmem->bstate.error = BERROR_RANGE;
        return true;
    }

    loop_t *loop = bmem->loops + loop_index;
    if (loop->for_line == 0)
    {
        bmem->bstate.error = BERROR_RUN;
        return true;
    }

    var_t *var = bastos_var_get(bmem->bstate.var_ref);
    if (var == 0)
    {
        bmem->bstate.error = BERROR_RUN;
        return true;
    }

    var->numbers[0] += loop->step;
    float cmp = loop->step >= 0 ? loop->limit - var->numbers[0] : var->numbers[0] - loop->limit;
    bmem->bstate.pc = cmp >= 0 ? loop->for_line : bmem_prog_next_line(bmem->bstate.prog);
    if (cmp < 0)
    {
        loop->for_line = 0;
    }

    return true;
}

static int8_t eval_prog(prog_t *prog, bool do_eval)
{
    // Init evaluator state
    bmem->bstate.do_eval = do_eval;
    bmem->bstate.read_ptr = prog->line;
    bmem->bstate.token = 0;
    bmem->bstate.string = 0;
    bmem->bstate.error = BERROR_NONE;
    bmem->bstate.prog = prog;
    bmem->bstate.flags &= ~B_GOTO_FLAG;

    // Do syntax check or eval
    bool eval = eval_instruction() || eval_if() || eval_for() || eval_next();

    // Syntax check end of line.
    eval = eval && (bmem->bstate.read_ptr == 0 || *bmem->bstate.read_ptr == 0);

    // Free evaluator state
    bmem->bstate.string = 0;
    bmem_strings_clear();

    // Handle syntax error
    if (!eval && bmem->bstate.error == BERROR_NONE)
    {
        bmem->bstate.error = BERROR_SYNTAX;
    }

    // TODO: We can support multiple intructions on the same line here

    return bmem->bstate.error;
}
